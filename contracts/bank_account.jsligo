/**
*An indicator of the status of the SC wallet
*    ACTIVE: default status
*    RECOVERING(address,timestamp): when the owner or someone else is trying to recover the account
*    DEAD: the owner is considered dead. All entry points are disabled except reboot_inheritancy_countdown and claim_inheritancy
*/
export type STATUS = ["ACTIVE"] | ["RECOVERING", address, timestamp] | ["DEAD"];

export type FREQUENCY =
  | ["SECOND", nat]
  | ["MINUTE", nat]
  | ["HOUR", nat]
  | ["DAY", nat]
  | ["WEEK", nat]
  | ["MONTH", nat]
  | ["YEAR", nat];

export type storage = {
  owners: set<address>,
  inheritors: set<address>,
  status: STATUS,
  quick_recovery_stake: tez, // The minimum stake a claimer should send to be able to call this function. By default it is equal to the balance of the account, otherwise, it is an amount in tez.
  quick_recovery_period: nat, // The time in days for the owner of the smart contract wallet to wait until he can retake control of his SC wallet. By default, it is 1 week.
  direct_debit_mandates: big_map<[address, FREQUENCY], tez>, // mandates for XTZ
  direct_debit_mandates_history: big_map<
    [address, FREQUENCY],
    timestamp
  > // executed mandates for XTZ

};

type ret = [list<operation>, storage];

/**
**Enroll an address to the smart contract wallet. Only an owner can do it
*/

@entry
const enroll = (owner: address, s: storage): ret => {
  if (Set.mem(Tezos.get_source(), s.owners)) return [
    list([]),
    { ...s, owners: Set.add(owner, s.owners) }
  ]; else return failwith("Only owners can call this function")
}

/**
**Revoke an address to the smart contract wallet. Only an owner can do it
*/

@entry
const revoke = (owner: address, s: storage): ret => {
  if (Set.mem(Tezos.get_source(), s.owners)) return [
    list([]),
    { ...s, owners: Set.remove(owner, s.owners) }
  ]; else return failwith("Only owners can call this function")
}

/**
** Send native money to someone. Only an owner can do it
*/

@entry
const transfer_XTZ = ([target, amount]: [address, tez], s: storage): ret => {
  if (Set.mem(Tezos.get_source(), s.owners)) {
    if (Tezos.get_balance() < amount) return failwith(
      "Cannot send more XTZ than the actual balance"
    )
    const op =
      Tezos.transaction(
        unit,
        amount,
        Tezos.get_contract_with_error(
          target,
          "Cannot find the contract from given address"
        )
      );
    return [list([op]), s]
  } else return failwith("Only owners can call this function")
}

/**
** Initiate a process of recovery due to complete lost or stolen keys. 
* This function requires passing some tez in order to avoid spam. 
* @see quick_recovery_stake and quick_recovery_period settings. 
* It is only possible if the contract is ACTIVE.
*/

@entry
const start_recover = (claimer: address, s: storage): ret => {
  if (s.status != ACTIVE()) return failwith(
    "Only active bank accounts can start recovery process"
  );
  if (Tezos.get_amount() < s.quick_recovery_stake) return failwith(
    "To a start recovery process, you need to stake a minimum amount (cf. quick_recovery_stake settings)"
  );
  return [list([]), { ...s, status: RECOVERING(claimer, Tezos.get_now()) }];
}

/**
**This function should enroll the claimer address as an owner after a certain period of time has passed and the recovery has not been canceled (i.e. in status RECOVERING). 
* If ok, the status passes to ACTIVE. 
* @see quick_recovery_stake and quick_recovery_period settings
*/

@entry
const claim_recovery = (_: unit, s: storage): ret => {
  return match(s.status) {
    when (ACTIVE()):
      failwith("Only recovering bank accounts can be claimed")
    when (DEAD()):
      failwith("Only recovering bank accounts can be claimed")
    when (RECOVERING(claimer, claimDate)):
      do {
        if (claimDate + (s.quick_recovery_period * 86400) > Tezos.get_now()) return failwith(
          "Too early to claim a bank account recovery, wait for quick_recovery_period to pass"
        );
        return [
          list([]),
          { ...s, owners: Set.add(claimer, s.owners), status: ACTIVE() }
        ];
      }
  }
}

/**
* Stop the recovery process. This function can be called only by an owner. 
* The status is back to ACTIVE.
*/

@entry
const stop_recovery = (_: unit, s: storage): ret => {
  if (! Set.mem(Tezos.get_source(), s.owners)) return failwith(
    "Only an owner can stop a recovery process"
  )
  return [list([]), { ...s, status: ACTIVE() }];
}

/*
* Add a new direct debit mandate in XTZ. Only owners can do it
*/

@entry
const add_direct_debit_mandate_XTZ = (
  [beneficiary, frequency, amount]: [address, FREQUENCY, tez],
  s: storage
): ret => {
  if (! Set.mem(Tezos.get_source(), s.owners)) failwith(
    "Only owners can call this function"
  )
  return [
    list([]),
    {
      ...s,
      direct_debit_mandates: Big_map.add(
        [beneficiary, frequency],
        amount,
        s.direct_debit_mandates
      )
    }
  ];
}

/*
* Revoke a direct debit mandate in XTZ. Only owners can do it
*/

@entry
const revoke_direct_debit_mandate_XTZ = (
  [beneficiary, frequency]: [address, FREQUENCY],
  s: storage
): ret => {
  if (! Set.mem(Tezos.get_source(), s.owners)) failwith(
    "Only owners can call this function"
  )
  return [
    list([]),
    {
      ...s,
      direct_debit_mandates: Big_map.remove(
        [beneficiary, frequency],
        s.direct_debit_mandates
      )
    }
  ];
}

const getMinimumDelayInSeconds = (frequency: FREQUENCY): int => {
  return match(frequency) {
    when (SECOND(nb)):
      1 * nb
    when (MINUTE(nb)):
      60 * nb
    when (HOUR(nb)):
      60 * 60 * nb
    when (DAY(nb)):
      86400 * nb
    when (WEEK(nb)):
      7 * 86400 * nb
    when (MONTH(nb)):
      30 * 86400 * nb
    when (YEAR(nb)):
      365 * 86400 * nb
  }
}

/*
* Execute a direct debit mandate in XTZ. Only the beneficiary can call this function at the correct date and not twice
*/

@entry
const execute_direct_debit_mandate_XTZ = (
  [requestedAmount, frequency]: [tez, FREQUENCY],
  s: storage
): ret => {
  return match(
    Big_map.find_opt([Tezos.get_source(), frequency], s.direct_debit_mandates)
  ) {
    when (None()):
      failwith("Cannot find a direct debit mandate from the input values")
    when (Some(amountFromMandate)):
      do {
        if (! Set.mem(Tezos.get_source(), s.owners)) return failwith(
          "Only owners can call this function"
        );
        if (requestedAmount > amountFromMandate) return failwith(
          "You cannot ask for more than the mandate indicated"
        );
        //look back in history to not take it twice ...
        return match(
          Big_map.find_opt(
            [Tezos.get_source(), frequency],
            s.direct_debit_mandates_history
          )
        ) {
          when (None()):
            do {
              return [
                list(
                  [
                    Tezos.transaction(
                      unit,
                      requestedAmount,
                      Tezos.get_contract_with_error(
                        Tezos.get_source(),
                        "Cannot find the caller contract"
                      )
                    )
                  ]
                ),
                {
                  ...s,
                  direct_debit_mandates_history: Big_map.add(
                    [Tezos.get_source(), frequency],
                    Tezos.get_now(),
                    s.direct_debit_mandates_history
                  )
                }
              ]
            }
          when (Some(last_execution_timestamp)):
            do {
              if (
                last_execution_timestamp + getMinimumDelayInSeconds(frequency)
                > Tezos.get_now()
              ) return failwith(
                "Cannot call the mandate again, it is too early"
              );
              return [
                list(
                  [
                    Tezos.transaction(
                      unit,
                      requestedAmount,
                      Tezos.get_contract_with_error(
                        Tezos.get_source(),
                        "Cannot find the caller contract"
                      )
                    )
                  ]
                ),
                {
                  ...s,
                  direct_debit_mandates_history: Big_map.add(
                    [Tezos.get_source(), frequency],
                    Tezos.get_now(),
                    s.direct_debit_mandates_history
                  )
                }
              ]
            }
        }
      }
  }
}
